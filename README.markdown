# xmlrunner

A unittest test runner that can save test results to XML files adhering to the JUnit Report
Structure and therefore can be consumed by a wide range of tools, such as build systems, IDEs,
continuous integration servers and Confluence.

If you find a bug the best way to have it fixed is to fix it yourself and to make a pull request.


## Features

- Writes the whole report into a single XML file
- Flattens the structure to contain only one test suite (to achieve compatibility with the standard
Confluence JUnit Report Macro)
- Removes `'` and `"` from the report file (to achieve compatibility with the standard Confluence
JUnit Report Macro)
- Pipes `print()` output to the commandline _and_ the report file


## Requirements

- Python 3.5+


## Installation

To get the latest version: Clone this repository and then run

````bash
$ cd xmlrunner
$ sudo python setup.py install
````

## Usage

Write the rest of your Testing Setup as usual using python's unittest.

Then finish it up with a code block like in the following example:

````python
date_formatted = datetime.datetime.now().strftime('%Y-%d-%m_%H-%M-%S')

path_to_xml = os.path.abspath(os.path.join(
    os.path.dirname(__file__),
    '_reports/report_%s.xml'%(date_formatted)
))
os.makedirs(os.path.dirname(path_to_xml), exist_ok=True)

with open(path_to_xml, 'w') as file_output:
    xml_runner = xmlrunner.XMLTestRunner(
        output=file_output
    )
    result = xml_runner.run(main_test_suite)
````


### Together with Django

In order to plug `XMLTestRunner` to a Django project, add the following
to your `settings.py`:

````python
TEST_RUNNER = 'xmlrunner.extra.djangotestrunner.XMLTestRunner'
````

Also, the following settings are provided so you can fine tune the reports:

**TEST_OUTPUT_VERBOSE** (Default: `1`)

Besides the XML reports generated by the test runner, a bunch of useful
information is printed to the `sys.stderr` stream, just like the
`TextTestRunner` does. Use this setting to choose between a verbose and a
non-verbose output.

**TEST_OUTPUT_DESCRIPTIONS** (Default: `False`)

If your test methods contains docstrings, you can display such docstrings
instead of display the test name (ex: `module.TestCase.test_method`). In
order to use this feature, you have to enable verbose output by setting
`TEST_OUTPUT_VERBOSE = 2`.

**TEST_OUTPUT_DIR** (Default: `"."`)

Tells the test runner where to put the XML reports. If the directory
couldn't be found, the test runner will try to create it before
generate the XML files.
